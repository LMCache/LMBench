name: Test Self-Hosted Runner

on:
  workflow_call:
    inputs:
      config_file:
        description: 'Path to the config file to use for run-bench.yaml'
        required: false
        type: string
        default: ''
    secrets:
      HF_TOKEN:
        description: 'Hugging Face token for model access'
        required: true
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-runner:
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Copy config file if specified
        if: ${{ inputs.config_file != '' }}
        run: |
          echo "📋 Copying config file: ${{ inputs.config_file }} to run-bench.yaml"
          cp "${{ inputs.config_file }}" run-bench.yaml
          echo "✅ Config file copied successfully"
          echo "📄 Contents of run-bench.yaml:"
          cat run-bench.yaml

      - name: Set up Conda environment
        shell: bash -l {0}
        run: |
          source ~/miniconda3/etc/profile.d/conda.sh
          conda activate py312
          python --version
          echo "✅ Installing Python dependencies..."
          pip install -r requirements.txt

      - name: Check run-bench.yaml configuration
        shell: bash -l {0}
        run: |
          set -e  # Exit immediately if any command fails
          source ~/miniconda3/etc/profile.d/conda.sh
          conda activate py312

          echo "🔍 Checking for run-bench.yaml in $(pwd)..."
          if [ ! -f "run-bench.yaml" ]; then
            echo "::error:: run-bench.yaml not found in project root."
            echo "❌ FAILING THE BUILD - run-bench.yaml is required!"
            exit 1
          fi
          echo "✅ Found run-bench.yaml"

          # Check if the infrastructure location is set to LMCacheGKE
          echo "🔍 Checking infrastructure location..."
          location=$(python3 -c "
          import yaml
          with open('run-bench.yaml', 'r') as f:
              config = yaml.safe_load(f)
              infrastructure = config.get('1-infrastructure', {})
              print(infrastructure.get('Location', ''))
          ")
          echo "📍 Infrastructure location found: '$location'"

          if [ "$location" != "LMCacheGKE" ]; then
            echo "::error:: Infrastructure location is '$location', not 'LMCacheGKE'. Expected 'LMCacheGKE'."
            echo "❌ FAILING THE BUILD - LMCacheGKE configuration required!"
            exit 1
          fi

          echo "✅ run-bench.yaml correctly configured for LMCacheGKE."

      - name: Show runner info
        run: |
          echo "✅ Running on self-hosted runner!"
          uname -a
          whoami
          echo "Current directory: $(pwd)"

      - name: Check gcloud CLI
        run: |
          echo "✅ Checking gcloud installation..."
          gcloud --version

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/816706432769/locations/global/workloadIdentityPools/lmbench-pool/providers/github-provider'
          service_account: 'lmbench-runner@theta-dialect-454217-m5.iam.gserviceaccount.com'

      - name: Show active gcloud account
        run: |
          echo "✅ Checking gcloud auth list..."
          gcloud auth list

      - name: Show active gcloud project
        run: |
          echo "✅ Checking gcloud active project..."
          gcloud config get-value project

      - name: List Compute Engine instances
        run: |
          echo "✅ Listing compute instances..."
          gcloud compute instances list

      - name: Run benchmark script
        shell: bash -l {0}
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          source ~/miniconda3/etc/profile.d/conda.sh
          conda activate py312
          echo "✅ Running benchmark script..."
          python run-bench.py

      - name: Compress benchmark result directories
        run: |
          mkdir -p compressed-artifacts
          for dir in 4-latest-results/*/; do
            name=$(basename "$dir")
            if [ "$name" != "post-processing" ]; then
              tar -czf "compressed-artifacts/$name.tar.gz" -C "4-latest-results" "$name"
            fi
          done

      - name: Set artifact name
        id: artifact-name
        run: |
          if [ -n "${{ inputs.config_file }}" ]; then
            config_name=$(basename "${{ inputs.config_file }}" .yaml)
            echo "name=benchmark-results-$config_name" >> $GITHUB_OUTPUT
          else
            echo "name=benchmark-results-default" >> $GITHUB_OUTPUT
          fi

      - name: Upload compressed benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.name }}
          path: compressed-artifacts/

  cleanup:
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read
    if: always()
    needs: [test-runner]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/816706432769/locations/global/workloadIdentityPools/lmbench-pool/providers/github-provider'
          service_account: 'lmbench-runner@theta-dialect-454217-m5.iam.gserviceaccount.com'

      - name: Run cleanup script
        shell: bash
        run: |
          echo "Running cleanup script to ensure GKE resources are removed..."
          chmod +x ./4-latest-results/post-processing/cleanup.sh
          ./4-latest-results/post-processing/cleanup.sh
          echo "✅ Cleanup completed"
